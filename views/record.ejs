<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ClassTrack</title>
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Bootstrap Icons -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css"
      rel="stylesheet"
    />
    <!-- Custom CSS -->
    <link rel="stylesheet" href="styles/record.css" />
    <link rel="stylesheet" href="styles/profile.css" />
  </head>
  <body>
    <!-- Navbar -->
    <%- include('partials/nameheader.ejs') %>

    <!-- Main Content -->
    <div class="main-section">
      <div class="container py-5">
        <div class="row">
          <!-- Guidelines -->
          <div class="col-lg-6 col-md-12 mb-4">
            <p class="guidelines-text">
              Starting the recording will activate the classroom camera and
              begin real-time attendance tracking. At the end of the session, a
              full attendance report will be generated automatically.
            </p>
            <h6>Important Guidelines:</h6>
            <ul class="guidelines-text">
              <li>
                Only <strong>one recording session</strong> is allowed per
                class.
              </li>
              <li>Each session runs for a maximum of 15 minutes.</li>
            </ul>
            <p class="mt-3 guidelines-text">
              Please make sure everything is ready before you begin.
            </p>
          </div>
          <!-- Timer -->
          <div class="col-lg-6 col-md-12 text-center">
            <div class="timer-circle">
              <span id="timer">15:00</span>
              <small>Timer</small>
            </div>
            <div class="recording-status mt-3">
              <span class="me-2">‚óè</span
              ><span id="status-text"
                >Camera is off - Recording not started</span
              >
            </div>
            <button
              class="btn-outline-secondary mt-3 ms-5"
              id="stop-btn"
              disabled
            >
              Stop Recording
            </button>
          </div>
        </div>

        <!-- Recording Controls -->
        <div class="row mt-4">
          <div class="col-12 text-center">
            <button class="custom-btn btn-with-arrow me-3" id="start-btn">
              Start Recording
            </button>
          </div>
        </div>

        <!-- Notes Section -->
        <div class="row mt-4">
          <div class="col-12">
            <label for="notes" class="form-label">Take Notes:</label>
            <textarea
              class="form-control notes-section"
              id="notes"
              placeholder="Add comments or remarks during the session..."
            ></textarea>
            <small class="text-primary"
              >* These notes will be automatically added to the final attendance
              sheet after the session.</small
            >
          </div>
        </div>
      </div>
    </div>

    <!-- Bootstrap JS and Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Custom JavaScript -->
    <script src="script.js"></script>
    <script src="Timer.js"></script>
    <script>
      const userInitialSpan = document.getElementById("user-char");
      const userName = "<%= name %>"; // from server
      const names = userName.trim().split(" ");
      let initials = names[0].charAt(0).toUpperCase();
      if (names.length > 1) {
        initials += names[1].charAt(0).toUpperCase();
      }
      userInitialSpan.textContent = initials;

      // Timer functionality
      const startBtn = document.getElementById("start-btn");
      const stopBtn = document.getElementById("stop-btn");
      const timerDisplay = document.getElementById("timer");
      const statusText = document.getElementById("status-text");

      let timer;
      let timeLeft = 900; // 15 minutes
      let isRunning = false;

      function updateTimer() {
        const minutes = Math.floor(timeLeft / 60);
        const seconds = timeLeft % 60;
        timerDisplay.textContent = `${minutes
          .toString()
          .padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;

        if (timeLeft <= 0) {
          clearInterval(timer);
          isRunning = false;
          startBtn.disabled = true;
          stopBtn.disabled = true;
          statusText.textContent = "Camera is off - Recording ended";
        }
        timeLeft--;
      }

      startBtn.addEventListener("click", () => {
        if (!isRunning) {
          isRunning = true;
          startBtn.disabled = true;
          stopBtn.disabled = false;
          statusText.textContent = "Camera is on - Recording started";

          // Start recording and wait for Python response
          fetch("/start-recording", { method: "POST" })
            .then((res) => res.json())
            .then((data) => {
              // Stop the timer when Python finishes
              clearInterval(timer);
              isRunning = false;
              stopBtn.disabled = true;
              statusText.textContent = "Camera is off - Recording ended";
            })
            .catch((err) => {
              console.error("Error:", err);
              clearInterval(timer);
              isRunning = false;
              stopBtn.disabled = true;
              statusText.textContent = "Error occurred - Recording stopped";
            });

          // Start the timer only after fetch is initiated
          timer = setInterval(updateTimer, 1000);
        }
      });

      stopBtn.addEventListener("click", () => {
        if (isRunning) {
          clearInterval(timer);
          isRunning = false;
          startBtn.disabled = true;
          stopBtn.disabled = true;
          statusText.textContent = "Camera is off - Recording stopped";
        }
      });
    </script>
  </body>
</html>
